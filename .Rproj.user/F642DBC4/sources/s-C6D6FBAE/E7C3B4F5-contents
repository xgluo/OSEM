library(parallel)

cl <- makeCluster(100)

clusterEvalQ(cl,{
  library(BiDAG)
  library(pcalg)
  library(bnlearn)
  library(MXM)
  library(sbgcop)
  library(infotheo)
  library(rpcart)
  library(devtools)
  source("inferCopulaModel.R")
})

clusterEvalQ(cl,{
  setwd("~/XGLuo/OSEM/OSEM/R")
  source("ordinalScore.R")
  insertSource("spacefns.R",package = "BiDAG")
  insertSource("usrscorefns.R",package = "BiDAG")
})

clusterEvalQ(cl, {
  cutfun <- function(L,c) {
    p <- gtools::rdirichlet(1,rep(c,L))
    return(qnorm(cumsum(p)[1:(L-1)]))
  }
  
  convertToOrdinal <- function(scaled_data, exp_levels = 4,concent_param = 0.5) {
    n <- ncol(scaled_data)
    if (exp_levels == 2) {
      ordinal_levels <- replicate(n,2)
    } else {
      ordinal_levels <- replicate(n,sample(c(2:(2 * exp_levels - 2)),1))
    }
    ordinal_data <- scaled_data
    for (i in c(1:n)) {
      
      check_levels <- ordinal_levels[i] - 1
      while (check_levels != ordinal_levels[i]) {
        cuts <- c(-Inf, 
                  cutfun(ordinal_levels[i],concent_param), 
                  Inf)
        temp <- cut(scaled_data[,i], simplify2array(cuts), labels = FALSE) - 1
        check_levels <- length(unique(temp))
      }
      ordinal_data[,i] <- temp
      
    }
    colnames(ordinal_data) <- c(1:n)
    return(ordinal_data)
  }
  
  rmvDAG2 <- function(N,randDAGobj) {
    AM <- as(randDAGobj, "matrix")
    sorted_ind <- ggm::topOrder((AM != 0))
    n <- nrow(AM)
    data <- matrix(nrow = N,ncol = n)
    for (j in sorted_ind) {
      parentnodes <- which(AM[,j] != 0)
      lp <- length(parentnodes) 
      switch (as.character(lp),
              "0" = {data[,j] <- rnorm(N)},
              "1" = {data[,j] <- rnorm(N, mean = data[,parentnodes] * AM[parentnodes,j], sd = 1)},
              {data[,j] <- rnorm(N, mean = data[,parentnodes] %*% AM[parentnodes,j], sd = 1)}
      )
    }
    return(data)
  }
  
  mywFUN <- function(m) {
    return(replicate(m,mywFUNhelper()))
  }
  
  mywFUNhelper <- function() {
    y <- runif(1, 0, 1.2)
    if( y < 0.6 ){
      x <- -1 + y
    }else{
      x <- 0.4 + y - 0.6
    }
    return(x)
  }
  
})


clusterEvalQ(cl,{
  
  build_ROC_Once <- function(N, n, d = 4, exp_levels = 4,concent_param = 2) {
    
    trueDAG <- randDAG(n = n, d = d, method = "er", wFUN = list(mywFUN))
    hidden_data <- rmvDAG2(N, trueDAG)
    truecov <- trueCov(trueDAG)
    D <- diag(sqrt(diag(truecov)))
    D.inv <- chol2inv(chol(D))
    trueSigma <- D.inv %*% truecov %*% D.inv
    scaled_data <- t(D.inv %*% t(hidden_data))
    ordinal_data <- convertToOrdinal(scaled_data, exp_levels = exp_levels,concent_param = concent_param)
    ordinal_data_df <- as.data.frame(ordinal_data)
    ordinal_data_df[] <- lapply(ordinal_data_df[], as.ordered)
    
    k <- 10
    alpha_list <- c(0.001,0.01,0.025,0.05,0.075,0.1,0.15,0.2,0.25,0.3)
    chi_list <- c(0.0001,0.001,0.01,0.1,1,10,20,40,60,80)
    lambda_list <- c((2/log(N) + 1)/2,1,1.5,2,2.5,3,4,6,10,20)
    am_list <- c(0.0001,0.001,0.01,0.025,0.05,0.1,0.25,0.5,1,1.5)
    hidden_am_list <- c(0.0001,0.01,0.05,0.25,0.5,1,2,3,5,7)
    
    summ_stats <- array(NA,dim = c(10,k,10,2),
                        dimnames = list(c("NPC","OPC","GPC","RPC","CPC","MMPC",
                                          "BDe","BGe","OSEM","pcart"),
                                        c(1:k),
                                        c("SHD","TP","FP","TN","FN","Precision","TPR","FPR_N","FPR_P","runtime"),
                                        c("hardP2P","softP2P")))
    
    for (i in c(1:k)) {
      
      cat("============Round ",i,"============\n")
      # NPC
      start_time = Sys.time()
      NPCfit <- pc(suffStat = list(dm = ordinal_data, 
                                   nlev = apply(ordinal_data, 2, function (x) length(unique(x))),
                                   adaptDF = FALSE),
                   alpha = alpha_list[i],
                   indepTest = disCItest,
                   labels = colnames(ordinal_data))
      summ_stats["NPC",i,1:9,"hardP2P"] <- comparePatterns(NPCfit,trueDAG)
      summ_stats["NPC",i,1:9,"softP2P"] <- comparePatterns(NPCfit,trueDAG,hardP2P = FALSE)
      summ_stats["NPC",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
      print("============NPC done")
      
      # OPC
      start_time = Sys.time()
      OPCfit <-  amat(pc.stable(ordinal_data_df, alpha = alpha_list[i], test = "jt"))
      summ_stats["OPC",i,1:9,"hardP2P"] <- comparePatterns(OPCfit,trueDAG)
      summ_stats["OPC",i,1:9,"softP2P"] <- comparePatterns(OPCfit,trueDAG,hardP2P = FALSE)
      summ_stats["OPC",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
      print("============OPC done")
      
      # GPC
      start_time = Sys.time()
      GPCfit <- pc(suffStat = list(C = cor(ordinal_data), n = N),
                   alpha = alpha_list[i],
                   indepTest = gaussCItest,
                   labels = colnames(ordinal_data))
      summ_stats["GPC",i,1:9,"hardP2P"] <- comparePatterns(GPCfit,trueDAG)
      summ_stats["GPC",i,1:9,"softP2P"] <- comparePatterns(GPCfit,trueDAG,hardP2P = FALSE)
      summ_stats["GPC",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
      print("============GPC done")
      
      # RPC
      start_time = Sys.time()
      corr.rank <- sin(pi/2 * cor(ordinal_data, use = 'pairwise.complete.obs', method = 'kendall'))
      RPCfit <- pc(suffStat = list(C = corr.rank, n = N), 
                   indepTest = gaussCItest, labels = colnames(ordinal_data), alpha = alpha_list[i], conservative = T)
      summ_stats["RPC",i,1:9,"hardP2P"] <- comparePatterns(RPCfit,trueDAG)
      summ_stats["RPC",i,1:9,"softP2P"] <- comparePatterns(RPCfit,trueDAG,hardP2P = FALSE)
      summ_stats["RPC",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
      print("============RPC done")
      
      # CPC
      start_time = Sys.time()
      cop.obj <- inferCopulaModel(ordinal_data, nsamp = 1000, S0 = diag(n)/N, verb = F)
      C_samples <- cop.obj$C.psamp[,, 501:1000]
      corr.cop <- apply(C_samples, c(1,2), mean)
      CPCfit <- pc(suffStat = list(C = corr.cop, n = N), 
                   indepTest = gaussCItest, labels = colnames(ordinal_data), alpha = alpha_list[i], conservative = T)
      summ_stats["CPC",i,1:9,"hardP2P"] <- comparePatterns(CPCfit,trueDAG)
      summ_stats["CPC",i,1:9,"softP2P"] <- comparePatterns(CPCfit,trueDAG,hardP2P = FALSE)
      summ_stats["CPC",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
      print("============CPC done")
      
      # MMPC
      start_time = Sys.time()
      skel <- pc.skel(ordinal_data_df, method = "comb.mm", alpha = alpha_list[i])
      MMPCfit <- pc.or(skel)$G
      MMPCfit[MMPCfit == 2] <- 1
      MMPCfit[MMPCfit == 3] <- 0
      summ_stats["MMPC",i,1:9,"hardP2P"] <- comparePatterns(MMPCfit,trueDAG)
      summ_stats["MMPC",i,1:9,"softP2P"] <- comparePatterns(MMPCfit,trueDAG,hardP2P = FALSE)
      summ_stats["MMPC",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
      print("============MMPC done")
      
      # BDE
      start_time = Sys.time()
      BDE <- scoreparameters("bdecat",data.frame(ordinal_data),bdecatpar = list(chi = chi_list[i]))
      BDEfit <- iterativeMCMC(BDE)
      summ_stats["BDe",i,1:9,"hardP2P"] <- comparePatterns(BDEfit$DAG,trueDAG)
      summ_stats["BDe",i,1:9,"softP2P"] <- comparePatterns(BDEfit$DAG,trueDAG,hardP2P = FALSE)
      summ_stats["BDe",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
      print("============BDe done")
      
      # BGE
      start_time = Sys.time()
      BGE <- scoreparameters("bge", ordinal_data, bgepar = list(am = am_list[i]))
      BGEfit <- iterativeMCMC(BGE)
      summ_stats["BGe",i,1:9,"hardP2P"] <- comparePatterns(BGEfit$DAG,trueDAG)
      summ_stats["BGe",i,1:9,"softP2P"] <- comparePatterns(BGEfit$DAG,trueDAG,hardP2P = FALSE)
      summ_stats["BGe",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
      print("============BGe done")
      
      # OSEM
      insertSource("~/XGLuo/OSEM/OSEM/R/usrscorefns.R",package = "BiDAG")
      OSEMfit <- ordinalStructEM(n, ordinal_data,
                                 usrpar = list(penType = "other",
                                               L = 5,
                                               lambda = lambda_list[i]))
      summ_stats["OSEM",i,1:9,"hardP2P"] <- comparePatterns(OSEMfit$DAG,trueDAG)
      summ_stats["OSEM",i,1:9,"softP2P"] <- comparePatterns(OSEMfit$DAG,trueDAG,hardP2P = FALSE)
      summ_stats["OSEM",i,10,] <- OSEMfit$runtime
      print("============OSEM done")
      
      # pcart
      start_time = Sys.time()
      insertSource("~/XGLuo/OSEM/OSEM/R/usrscorefns_pcart.R",package = "BiDAG")
      pcartparam <- scoreparameters("usr", ordinal_data_df, usrpar = list(pcart_alpha = chi_list[i], pctesttype = "bde"))
      pcartfit <- iterativeMCMC(pcartparam, scoreout = TRUE, alpha = 0, plus1it = 10, softlimit = 3, hardlimit = 3)
      summ_stats["pcart",i,1:9,"hardP2P"] <- comparePatterns(pcartfit$DAG,trueDAG)
      summ_stats["pcart",i,1:9,"softP2P"] <- comparePatterns(pcartfit$DAG,trueDAG,hardP2P = FALSE)
      summ_stats["pcart",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
      print("============pcart done")
    }
    
    return(summ_stats)
  }
})

results <- parLapply(cl,1:100,function(i) build_ROC_Once(500,20,4,3,2))
stopCluster(cl)
fname <- "N500_n20_s4_L3_nu2"
try(setwd("~/XGLuo/OSEM/simulations_20210510"))
results <- simplify2array(results)
save(results,file = paste(fname,".RData",sep = ""))
