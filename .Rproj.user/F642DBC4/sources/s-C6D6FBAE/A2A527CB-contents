library(parallel)
library(BiDAG)
library(Rgraphviz)
library(pcalg)
library(graph)
library(bnlearn)
library(MXM)
library(sbgcop)
library(infotheo)
library(rpcart)
library(devtools)
source("inferCopulaModel.R")

setwd("~/XGLuo/OSEM/OSEM/R")
source("ordinalScore.R")
insertSource("spacefns.R",package = "BiDAG")
insertSource("usrscorefns.R",package = "BiDAG")
insertSource("initpar.R",package = "BiDAG")
insertSource("scoreagainstdag.R",package = "BiDAG")

build_ROC_Once <- function(N, n, d = 4, exp_levels = 4,concent_param = 2) {

  trueDAG <- randDAG(n = n, d = d, method = "er", wFUN = list(mywFUN))
  hidden_data <- rmvDAG2(N, trueDAG)
  truecov <- trueCov(trueDAG)
  D <- diag(sqrt(diag(truecov)))
  D.inv <- chol2inv(chol(D))
  trueSigma <- D.inv %*% truecov %*% D.inv
  scaled_data <- t(D.inv %*% t(hidden_data))
  ordinal_data <- convertToOrdinal(scaled_data, exp_levels = exp_levels,concent_param = concent_param)
  ordinal_data_df <- as.data.frame(ordinal_data)
  ordinal_data_df[] <- lapply(ordinal_data_df[], as.ordered)
  dat_levels <- apply(ordinal_data, 2, function(x) length(unique(x)))

  test <- sample(1:N, N/5, replace=FALSE)
  train <- (-test)
  train.data <- ordinal_data[train,]
  test.data <- ordinal_data[test,]

  k <- 10
  alpha_list <- c(0.001,0.01,0.025,0.05,0.075,0.1,0.15,0.2,0.25,0.3)
  chi_list <- c(0.0001,0.001,0.01,0.1,1,10,20,40,60,80)
  lambda_list <- c(1,1.5,2,2.5,3,4,6,10,20,30)
  am_list <- c(0.0001,0.001,0.01,0.025,0.05,0.1,0.25,0.5,1,1.5)
  hidden_am_list <- c(0.0001,0.01,0.05,0.25,0.5,1,2,3,5,7)

  summ_stats <- array(NA,dim = c(11,k,11,2),
                      dimnames = list(c("NPC","OPC","GPC","RPC","CPC","MMPC",
                                        "BDe","BGe","OSEM","pcart","opcart"),
                                      c(1:k),
                                      c("SHD","TP","FP","TN","FN","Precision","TPR","FPR_N","FPR_P","runtime","log_loss"),
                                      c("pattern","skeleton")))

  for (i in c(1:k)) {

    cat("============Round ",i,"============\n")
    # NPC
    start_time = Sys.time()
    NPCfit <- pc(suffStat = list(dm = ordinal_data,
                                 nlev = dat_levels,
                                 adaptDF = FALSE),
                 alpha = alpha_list[i],
                 indepTest = disCItest,
                 labels = colnames(ordinal_data))
    summ_stats["NPC",i,1:9,"pattern"] <- comparePatterns(NPCfit,trueDAG)
    summ_stats["NPC",i,1:9,"skeleton"] <- comparePatterns(NPCfit,trueDAG,skeleton = TRUE)
    summ_stats["NPC",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
    print("============NPC done")

    # OPC
    start_time = Sys.time()
    OPCfit <-  amat(pc.stable(ordinal_data_df, alpha = alpha_list[i], test = "jt"))
    summ_stats["OPC",i,1:9,"pattern"] <- comparePatterns(OPCfit,trueDAG)
    summ_stats["OPC",i,1:9,"skeleton"] <- comparePatterns(OPCfit,trueDAG,skeleton = TRUE)
    summ_stats["OPC",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
    print("============OPC done")

    # GPC
    start_time = Sys.time()
    GPCfit <- pc(suffStat = list(C = cor(ordinal_data), n = N),
                 alpha = alpha_list[i],
                 indepTest = gaussCItest,
                 labels = colnames(ordinal_data))
    summ_stats["GPC",i,1:9,"pattern"] <- comparePatterns(GPCfit,trueDAG)
    summ_stats["GPC",i,1:9,"skeleton"] <- comparePatterns(GPCfit,trueDAG,skeleton = TRUE)
    summ_stats["GPC",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
    print("============GPC done")

    # RPC
    start_time = Sys.time()
    corr.rank <- sin(pi/2 * cor(ordinal_data, use = 'pairwise.complete.obs', method = 'kendall'))
    RPCfit <- pc(suffStat = list(C = corr.rank, n = N),
                 indepTest = gaussCItest, labels = colnames(ordinal_data), alpha = alpha_list[i], conservative = T)
    summ_stats["RPC",i,1:9,"pattern"] <- comparePatterns(RPCfit,trueDAG)
    summ_stats["RPC",i,1:9,"skeleton"] <- comparePatterns(RPCfit,trueDAG,skeleton = TRUE)
    summ_stats["RPC",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
    print("============RPC done")

    # CPC
    start_time = Sys.time()
    cop.obj <- inferCopulaModel(ordinal_data, nsamp = 1000, S0 = diag(n)/N, verb = F)
    C_samples <- cop.obj$C.psamp[,, 501:1000]
    corr.cop <- apply(C_samples, c(1,2), mean)
    CPCfit <- pc(suffStat = list(C = corr.cop, n = N),
                 indepTest = gaussCItest, labels = colnames(ordinal_data), alpha = alpha_list[i], conservative = T)
    summ_stats["CPC",i,1:9,"pattern"] <- comparePatterns(CPCfit,trueDAG)
    summ_stats["CPC",i,1:9,"skeleton"] <- comparePatterns(CPCfit,trueDAG,skeleton = TRUE)
    summ_stats["CPC",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
    print("============CPC done")

    # MMPC
    start_time = Sys.time()
    skel <- pc.skel(ordinal_data_df, method = "comb.mm", alpha = alpha_list[i])
    MMPCfit <- pc.or(skel)$G
    MMPCfit[MMPCfit == 2] <- 1
    MMPCfit[MMPCfit == 3] <- 0
    summ_stats["MMPC",i,1:9,"pattern"] <- comparePatterns(MMPCfit,trueDAG)
    summ_stats["MMPC",i,1:9,"skeleton"] <- comparePatterns(MMPCfit,trueDAG,skeleton = TRUE)
    summ_stats["MMPC",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
    print("============MMPC done")

    # BDE
    start_time = Sys.time()
    BDE <- scoreparameters("bdecat",data.frame(ordinal_data),bdecatpar = list(chi = chi_list[i]))
    BDEfit <- iterativeMCMC(BDE)
    summ_stats["BDe",i,1:9,"pattern"] <- comparePatterns(BDEfit$DAG,trueDAG)
    summ_stats["BDe",i,1:9,"skeleton"] <- comparePatterns(BDEfit$DAG,trueDAG,skeleton = TRUE)
    summ_stats["BDe",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
    BDE <- scoreparameters("bdecat", data.frame(train.data), bdecatpar = list(chi = chi_list[i], bdecatCvec=dat_levels))
    BDEfit <- iterativeMCMC(BDE)
    summ_stats["BDe",i,11,] <- sum(scoreagainstDAG(BDE,BDEfit$DAG,test.data,bdecatCvec=dat_levels))
    print("============BDe done")

    # OSEM
    insertSource("~/XGLuo/OSEM/OSEM/R/usrscorefns.R",package = "BiDAG")
    OSEMfit <- ordinalStructEM(n, ordinal_data,
                               usrpar = list(penType = "other",
                                             L = 5,
                                             lambda = lambda_list[i]))
    summ_stats["OSEM",i,1:9,"pattern"] <- comparePatterns(OSEMfit$DAG,trueDAG)
    summ_stats["OSEM",i,1:9,"skeleton"] <- comparePatterns(OSEMfit$DAG,trueDAG,skeleton = TRUE)
    summ_stats["OSEM",i,10,] <- OSEMfit$runtime
    OSEMfit <- ordinalStructEM(n, train.data,
                               usrpar = list(penType = "other",
                                             L = 5,
                                             lambda = lambda_list[i],
                                             preLevels = dat_levels))
    OSEM.test.param <- OSEMfit$param
    OSEM.test.param$data <- test.data
    summ_stats["OSEM",i,11,] <- observedLL(OSEM.test.param)
    print("============OSEM done")

    # BGE
    start_time = Sys.time()
    BGE <- scoreparameters("bge", ordinal_data, bgepar = list(am = am_list[i]))
    BGEfit <- iterativeMCMC(BGE)
    summ_stats["BGe",i,1:9,"pattern"] <- comparePatterns(BGEfit$DAG,trueDAG)
    summ_stats["BGe",i,1:9,"skeleton"] <- comparePatterns(BGEfit$DAG,trueDAG,skeleton = TRUE)
    summ_stats["BGe",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
    BGE <- scoreparameters("bge", train.data, bgepar = list(am = am_list[i]))
    BGEfit <- iterativeMCMC(BGE)
    BGE.test.param <- BGE
    BGE.test.param$Sigma_hat <- BGe_MAP_Sigma(BGE$TN,BGEfit$DAG)
    BGE.test.param$cuts <- OSEM.test.param$cuts
    BGE.test.param$data <- test.data
    summ_stats["BGe",i,11,] <- observedLL(BGE.test.param)
    print("============BGe done")

    # pcart
    start_time = Sys.time()
    insertSource("~/XGLuo/OSEM/OSEM/R/usrscorefns_pcart.R",package = "BiDAG")
    pcartparam <- scoreparameters("usr", ordinal_data_df,
                                  usrpar = list(pcart_alpha = chi_list[i],
                                                pcart_kappa = 0.25,
                                                pctesttype = "bde",
                                                preLevels = dat_levels,
                                                response_type = "CAT"))
    pcartfit <- iterativeMCMC(pcartparam, alpha = 0, plus1it = 10, softlimit = 3, hardlimit = 3)
    summ_stats["pcart",i,1:9,"pattern"] <- comparePatterns(pcartfit$DAG,trueDAG)
    summ_stats["pcart",i,1:9,"skeleton"] <- comparePatterns(pcartfit$DAG,trueDAG,skeleton = TRUE)
    summ_stats["pcart",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
    pcartparam <- scoreparameters("usr", train.data,
                                  usrpar = list(pcart_alpha = chi_list[i],
                                                pcart_kappa = 0.25,
                                                pctesttype = "bde",
                                                preLevels = dat_levels,
                                                response_type = "CAT"))
    pcartfit <- iterativeMCMC(pcartparam, alpha = 0, plus1it = 10, softlimit = 3, hardlimit = 3)
    pcart.bde.param <- BDE
    pcart.bde.param$chi <- pcartparam$pcart_alpha
    summ_stats["pcart",i,11,] <- sum(scoreagainstDAG(pcart.bde.param,pcartfit$DAG,test.data,bdecatCvec=dat_levels))
    print("============pcart done")

    # opcart
    start_time = Sys.time()
    opcartparam <- scoreparameters("usr", ordinal_data_df,
                                   usrpar = list(pcart_alpha = chi_list[i],
                                                 pcart_kappa = 0.25,
                                                 pctesttype = "bde",
                                                 preLevels = dat_levels,
                                                 response_type = "ORD"))
    opcartfit <- iterativeMCMC(opcartparam, alpha = 0, plus1it = 10, softlimit = 3, hardlimit = 3)
    summ_stats["opcart",i,1:9,"pattern"] <- comparePatterns(opcartfit$DAG,trueDAG)
    summ_stats["opcart",i,1:9,"skeleton"] <- comparePatterns(opcartfit$DAG,trueDAG,skeleton = TRUE)
    summ_stats["opcart",i,10,] <- as.double(Sys.time() - start_time,units = "secs")
    opcartparam <- scoreparameters("usr", train.data,
                                   usrpar = list(pcart_alpha = chi_list[i],
                                                 pcart_kappa = 0.25,
                                                 pctesttype = "bde",
                                                 preLevels = dat_levels,
                                                 response_type = "ORD"))
    opcartfit <- iterativeMCMC(opcartparam, alpha = 0, plus1it = 10, softlimit = 3, hardlimit = 3)
    opcart.bde.param <- BDE
    opcart.bde.param$chi <- opcartparam$pcart_alpha
    summ_stats["opcart",i,11,] <- sum(scoreagainstDAG(opcart.bde.param,opcartfit$DAG,test.data,bdecatCvec=dat_levels))
    print("============opcart done")


  }

  return(summ_stats)
}

results <- mclapply(c(1:100), function(i) build_ROC_Once(500,20,4,3,2), mc.cores = 100)
fname <- "N500_n20_s4_L3_nu2"
try(setwd("~/XGLuo/OSEM/simulations_20210629/results"))
try(results <- simplify2array(results))
save(results,file = paste(fname,".RData",sep = ""))

