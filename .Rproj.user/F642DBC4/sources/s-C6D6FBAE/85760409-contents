datVotes <- read.csv("~/Downloads/house-votes-84.data.csv", header = FALSE)

head(datVotes)
colnames(datVotes) <- c("party","handicapped_infants","water_project_cost_sharing",
                      "adoption_of_the_budget_resolution","physician_fee_freeze","el_salvador_aid",
                      "religious_groups_in_schools","anti_satellite_test_ban","aid_to_nicaraguan_contras",
                      "mx_missile","immigration","synfuels_corporation_cutback","education_spending",
                      "superfund_right_to_sue","crime","duty_free_exports","export_administration_act_south_africa")

# party: republican [0]; democratic [1]
datVotes$party[datVotes$party == "republican"] <- 0
datVotes$party[datVotes$party == "democrat"] <- 1

# replace "n" with 0 and "y" with 1, impute "?"
for (i in c(2:ncol(datVotes))) {
  p_n <- sum(datVotes[,i] == "n")
  p_y <- sum(datVotes[,i] == "y")
  datVotes[datVotes[,i] == "?",i] <- sample(c("n","y"), sum(datVotes[,i] == "?"), replace = TRUE, prob = c(p_n, p_y) / (p_n + p_y))
  datVotes[datVotes[,i] == "n",i] <- 0
  datVotes[datVotes[,i] == "y",i] <- 1
}

for (i in c(1:ncol(datVotes))) {
  datVotes[,i] <- as.integer(datVotes[,i])
}

save(datVotes,file = "~/Documents/Projects/OSEM/simulations_20210629/real_data/datVotes.RData")

# Create training and test set for validation set approach (80% train/20% test)
n <- ncol(datVotes)
N <- nrow(datVotes)
test <- sample(1:N, N/5, replace=FALSE)
train <- (-test)
train.data <- datVotes[train,]
test.data <- datVotes[test,]
datVotes_levels <- apply(datVotes, 2, function(x) length(unique(x)))
datVotes_levels - apply(train.data, 2, function(x) length(unique(x)))

BDE <- scoreparameters("bdecat",train.data,bdecatpar = list(chi = 25,bdecatCvec=datVotes_levels))
BDEfit <- iterativeMCMC(BDE)
sum(scoreagainstDAG(BDE,BDEfit$DAG,test.data,bdecatCvec=datVotes_levels))
mean(apply(BDEfit$DAG,2,sum))

OSEMfit <- ordinalStructEM(n, train.data,
                           usrpar = list(penType = "other",
                                         L = 5,
                                         lambda = 2,
                                         preLevels = datVotes_levels))
OSEM.test.param <- OSEMfit$param
OSEM.test.param$data <- test.data
observedLL(OSEM.test.param)
mean(apply(OSEMfit$DAG,2,sum))


BGE <- scoreparameters("bge", train.data, bgepar = list(am = 6))
BGEfit <- iterativeMCMC(BGE)
mean(apply(BGEfit$DAG,2,sum))
BGE.test.param <- BGE
BGE.test.param$Sigma_hat <- BGe_MAP_Sigma(BGE$TN,BGEfit$DAG)
BGE.test.param$cuts <- OSEM.test.param$cuts
BGE.test.param$data <- test.data
observedLL(BGE.test.param)
