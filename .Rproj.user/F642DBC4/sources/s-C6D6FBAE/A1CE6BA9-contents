datAUI <- read.csv("~/Downloads/diagnosis.data.csv", header = FALSE)

head(datAUI)
colnames(datAUI) <- c("temperature","nausea","lumbar_pain","urine_pushing",
                      "micturition_pain","urethra_pain","inflammation_decision",
                      "nephritis_decision")

# temperature: 0 (35,37]; 1 [37,40); 2 [40,42)
datAUI$temperature <- cut(datAUI$temperature,breaks = c(35,37,40,42),labels = FALSE) - 1

# convert yes/no to binary
datAUI[datAUI == "no"] <- 0
datAUI[datAUI == "yes"] <- 1

for (i in c(1:ncol(datAUI))) {
  datAUI[,i] <- as.integer(datAUI[,i])
}

save(datAUI,file = "~/Documents/Projects/OSEM/simulations_20210629/real_data/datAUI.RData")

# Create training and test set for validation set approach (80% train/20% test)
n <- ncol(datAUI)
N <- nrow(datAUI)
test <- sample(1:N, N/5, replace=FALSE)
train <- (-test)
train.data <- datAUI[train,]
test.data <- datAUI[test,]
datAUI_levels <- apply(datAUI, 2, function(x) length(unique(x)))
datAUI_levels - apply(train.data, 2, function(x) length(unique(x)))

BDE <- scoreparameters("bdecat",train.data,bdecatpar = list(chi = 25,bdecatCvec=datAUI_levels))
BDEfit <- iterativeMCMC(BDE)
sum(scoreagainstDAG(BDE,BDEfit$DAG,test.data,bdecatCvec=datAUI_levels))
mean(apply(BDEfit$DAG,2,sum))

OSEMfit <- ordinalStructEM(n, train.data,
                           usrpar = list(penType = "other",
                                         L = 5,
                                         lambda = 2,
                                         preLevels = datAUI_levels))
OSEM.test.param <- OSEMfit$param
OSEM.test.param$data <- test.data
observedLL(OSEM.test.param)
mean(apply(OSEMfit$DAG,2,sum))


BGE <- scoreparameters("bge", train.data, bgepar = list(am = 6))
BGEfit <- iterativeMCMC(BGE)
mean(apply(BGEfit$DAG,2,sum))
BGE.test.param <- BGE
BGE.test.param$Sigma_hat <- BGe_MAP_Sigma(BGE$TN,BGEfit$DAG)
BGE.test.param$cuts <- OSEM.test.param$cuts
BGE.test.param$data <- test.data
observedLL(BGE.test.param)
