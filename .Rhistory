geom_line(mapping = aes(x = param, y = avg_nr_pa), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(0,5))
},
"both" = {
test <- adply(results[method,,,],c(1,2,4))
test2 <- adply(apply(results[method,,,], c(1,2,3), mean),c(1,2))
test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
current_dataset <- "logloss_Votes_v1"
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
g9 <- get_log_loss(current_dataset,"opcart","log_loss","opcart",opcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[5])
g10 <- get_log_loss(current_dataset,"opcart","avg_nr_pa","opcart",opcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[5])
current_dataset <- "logloss_Votes_v1"
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
g9 <- get_log_loss(current_dataset,"opcart","log_loss","opcart",opcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[5])
g10 <- get_log_loss(current_dataset,"opcart","avg_nr_pa","opcart",opcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[5])
ggarrange(g1,g3,g5,g7,g9,g2,g4,g6,g8,g10,nrow = 2,ncol = 5,align = "v")
warnings
warnings()
get_log_loss <- function(fname, method, metric, title, param_list, x_lab, y_lab, col) {
load(paste(fname,".RData",sep = ""))
results <- results[c("OSEM",   "BDe",     "BGe" ,    "pcart" ,  "opcart"),,,]
switch (metric,
"log_loss" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","log_loss","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = log_loss, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = log_loss), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(-1100,-600))
},
"avg_nr_pa" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","avg_nr_pa","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = avg_nr_pa, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = avg_nr_pa), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(0,5))
},
"both" = {
test <- adply(results[method,,,],c(1,2,4))
test2 <- adply(apply(results[method,,,], c(1,2,3), mean),c(1,2))
test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
g9 <- get_log_loss(current_dataset,"opcart","log_loss","opcart",opcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[5])
g10 <- get_log_loss(current_dataset,"opcart","avg_nr_pa","opcart",opcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[5])
ggarrange(g1,g3,g5,g7,g9,g2,g4,g6,g8,g10,nrow = 2,ncol = 5,align = "v")
get_log_loss <- function(fname, method, metric, title, param_list, x_lab, y_lab, col) {
load(paste(fname,".RData",sep = ""))
# results <- results[c("OSEM",   "BDe",     "BGe" ,    "pcart" ,  "opcart"),,,]
results <- results[c("OSEM",   "BDe",     "BGe" ,    "pcart"),,,]
switch (metric,
"log_loss" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","log_loss","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = log_loss, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = log_loss), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(-800,-600))
},
"avg_nr_pa" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","avg_nr_pa","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = avg_nr_pa, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = avg_nr_pa), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(0,5))
},
"both" = {
test <- adply(results[method,,,],c(1,2,4))
test2 <- adply(apply(results[method,,,], c(1,2,3), mean),c(1,2))
test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
g9 <- get_log_loss(current_dataset,"opcart","log_loss","opcart",opcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[5])
g10 <- get_log_loss(current_dataset,"opcart","avg_nr_pa","opcart",opcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[5])
ggarrange(g1,g3,g5,g7,g2,g4,g6,g8,nrow = 2,ncol = 4,align = "v")
load("/Users/luox/Documents/Projects/OSEM/simulations_20210629/results/logloss_Votes_v1.RData")
results_OSEM <- array(results[1,1,,],dim = c(1,2,100))
results_BDe <- array(results[2,3,,], dim = c(1,2,100))
results_BGe <- array(results[3,1,,], dim = c(1,2,100))
results_pcart <- array(results[4,2,,],dim= c(1,2,100))
results2 <- abind(results_OSEM,results_BGe,results_BDe,results_pcart, along = 1)
dimnames(results2)[[1]] <- c("OSEM","BGe","BDe","pcart")
test <- adply(results2[,1,],c(1,2))
colnames(test) <- c("Method","Nr","Log_loss")
test2 <- with(test,aggregate(.~Method,test,mean))[,c(1,3)]
colnames(test2) <- list("Method","Log_loss")
g1 <- ggplot(test, aes(x = Method, y = Log_loss, color = Method)) + geom_boxplot(show.legend = FALSE) +
labs(color = "Method") +
ylab("log loss on test data") + xlab("Method") +
scale_fill_manual(values = myPalette) + scale_color_manual(values = myPalette) + theme(legend.position = "none")
test <- adply(results2[,2,],c(1,2))
colnames(test) <- c("Method","Nr","avg_nr_pa")
test2 <- with(test,aggregate(.~Method,test,mean))[,c(1,3)]
colnames(test2) <- list("Method","avg_nr_pa")
g2 <- ggplot(test, aes(x = Method, y = avg_nr_pa, color = Method)) + geom_boxplot(show.legend = FALSE) +
labs(color = "Method") +
ylab("average parent set size") + xlab("Method") +
scale_fill_manual(values = myPalette) + scale_color_manual(values = myPalette) + theme(legend.position = "none")
ggarrange(g1,g2)
ggarrange(g1,g3,g5,g7,g2,g4,g6,g8,nrow = 2,ncol = 4,align = "v")
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
ggarrange(g1,g3,g5,g7,g2,g4,g6,g8,nrow = 2,ncol = 4,align = "v")
current_dataset <- "logloss_AUI_v1"
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
g9 <- get_log_loss(current_dataset,"opcart","log_loss","opcart",opcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[5])
g10 <- get_log_loss(current_dataset,"opcart","avg_nr_pa","opcart",opcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[5])
load("/Users/luox/Documents/Projects/OSEM/simulations_20210629/results/logloss_AUI_v1.RData")
dimnames(results)
get_log_loss <- function(fname, method, metric, title, param_list, x_lab, y_lab, col) {
load(paste(fname,".RData",sep = ""))
results <- results[c("OSEM",   "BDe",     "BGe" ,    "pcart" ,  "opcart"),,,]
#results <- results[c("OSEM",   "BDe",     "BGe" ,    "pcart"),,,]
switch (metric,
"log_loss" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","log_loss","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = log_loss, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = log_loss), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(-800,-600))
},
"avg_nr_pa" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","avg_nr_pa","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = avg_nr_pa, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = avg_nr_pa), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(0,5))
},
"both" = {
test <- adply(results[method,,,],c(1,2,4))
test2 <- adply(apply(results[method,,,], c(1,2,3), mean),c(1,2))
test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
ggarrange(g1,g3,g5,g7,g2,g4,g6,g8,nrow = 2,ncol = 4,align = "v")
min(results[,,"log_loss",])
results <- results[c("OSEM",   "BDe",     "BGe" ,    "pcart" ,  "opcart"),,,]
min(results[,,"log_loss",])
max(results[,,"log_loss",])
get_log_loss <- function(fname, method, metric, title, param_list, x_lab, y_lab, col) {
load(paste(fname,".RData",sep = ""))
results <- results[c("OSEM",   "BDe",     "BGe" ,    "pcart" ,  "opcart"),,,]
#results <- results[c("OSEM",   "BDe",     "BGe" ,    "pcart"),,,]
switch (metric,
"log_loss" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","log_loss","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = log_loss, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = log_loss), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(-150,-60))
},
"avg_nr_pa" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","avg_nr_pa","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = avg_nr_pa, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = avg_nr_pa), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(0,5))
},
"both" = {
test <- adply(results[method,,,],c(1,2,4))
test2 <- adply(apply(results[method,,,], c(1,2,3), mean),c(1,2))
test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
ggarrange(g1,g3,g5,g7,g2,g4,g6,g8,nrow = 2,ncol = 4,align = "v")
datTurkey <- read.csv("~/Downloads/turkiye-student-evaluation_R_Specific.csv", header = TRUE)
head(datTurkey)
datTurkey$instr <- NULL
datTurkey$class <- NULL
head(datTurkey)
table(datTurkey$nb.repeat)
any(is.na(datTurkey))
table(datTurkey$attendance)
datTurkey[,-c(1,2)] <- datTurkey[,-c(1,2)] - 1
head(datTurkey)
datTurkey <- read.csv("~/Downloads/turkiye-student-evaluation_R_Specific.csv", header = TRUE)
head(datTurkey)
datTurkey$instr <- NULL
datTurkey$class <- NULL
datTurkey[,-c(2)] <- datTurkey[,-c(2)] - 1
head(datTurkey)
sapply(datTurkey, class)
for (i in c(1:ncol(datTurkey))) {
datTurkey[,i] <- as.integer(datTurkey[,i])
}
sapply(datTurkey, class)
sapply(datTurkey, table)
save(datTurkey,file = "~/Documents/Projects/OSEM/simulations_20210629/real_data/datTurkey.RData")
n <- ncol(datTurkey)
N <- nrow(datTurkey)
test <- sample(1:N, N/5, replace=FALSE)
train <- (-test)
train.data <- datTurkey[train,]
test.data <- datTurkey[test,]
datTurkey_levels <- apply(datTurkey, 2, function(x) length(unique(x)))
datTurkey_levels - apply(train.data, 2, function(x) length(unique(x)))
datTurkey_levels
mean(datTurkey_levels)
BDE <- scoreparameters("bdecat",train.data,bdecatpar = list(chi = 25,bdecatCvec=datTurkey_levels))
library(BiDAG)
library(Rgraphviz)
library(pcalg)
library(graph)
library(bnlearn)
library(MXM)
library(sbgcop)
library(infotheo)
library(rpcart)
library(devtools)
#source_url("https://raw.githubusercontent.com/cuiruifei/CausalMissingValues/master/R/gaussCItestLocal.R")
source_url("https://raw.githubusercontent.com/cuiruifei/CausalMissingValues/master/R/inferCopulaModel.R")
#source_url("https://raw.githubusercontent.com/cuiruifei/CausalMissingValues/master/R/addMAR.R")
setwd("../R")
# Major file containing the OSEM algorithm
source("ordinalScore.R")
# Modify some of the existing functions in the BiDAG package to accommodate our user-defined functions
insertSource("spacefns.R",package = "BiDAG")
insertSource("usrscorefns.R",package = "BiDAG")
insertSource("initpar.R",package = "BiDAG")
insertSource("scoreagainstdag.R",package = "BiDAG")
BDE <- scoreparameters("bdecat",train.data,bdecatpar = list(chi = 25,bdecatCvec=datTurkey_levels))
BDEfit <- iterativeMCMC(BDE)
BDE <- scoreparameters("bdecat",train.data,bdecatpar = list(chi = 2,bdecatCvec=datTurkey_levels))
BDEfit <- iterativeMCMC(BDE)
BGE <- scoreparameters("bge", train.data, bgepar = list(am = 6))
BGEfit <- iterativeMCMC(BGE)
chi_list <- c(20,30,40,50,60,70,80)
lambda_list <- c(2/log(327),(2/log(327) + 1)/2,1,1.25,1.5,2,2.5)
am_list <- c(1,3,5,7,10,15,20)
pcart_alpha_list <- c(5,8,11,15,18,20,25)
opcart_alpha_list <- c(1.5,2,2.5,3,3.5,4,4.5)
get_log_loss <- function(fname, method, metric, title, param_list, x_lab, y_lab, col) {
load(paste(fname,".RData",sep = ""))
#results <- results[c("OSEM",   "BDe",     "BGe" ,    "pcart" ,  "opcart"),,,]
results <- results[c("OSEM",   "BDe",     "BGe" ,    "pcart"),,,]
ylim_min <- min(results[,,"log_loss",])
ylim_max <- max(results[,,"log_loss",])
switch (metric,
"log_loss" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","log_loss","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = log_loss, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = log_loss), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(ylim_min,ylim_max))
},
"avg_nr_pa" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","avg_nr_pa","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = avg_nr_pa, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = avg_nr_pa), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(0,5))
},
"both" = {
test <- adply(results[method,,,],c(1,2,4))
test2 <- adply(apply(results[method,,,], c(1,2,3), mean),c(1,2))
test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
setwd("~/Documents/Projects/OSEM/simulations_20210629/results/")
current_dataset <- "logloss_India_v1"
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
g9 <- get_log_loss(current_dataset,"opcart","log_loss","opcart",opcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[5])
g10 <- get_log_loss(current_dataset,"opcart","avg_nr_pa","opcart",opcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[5])
library(ggplot2)
library(gridExtra)
library(plyr)
library(ggpubr)
library(latex2exp)
library(dplyr)
library(abind)
setwd("~/Documents/Projects/OSEM/simulations_20210629/results/")
myPalette <- c("#E69F00","#56B4E9","#2b9e00","#0072B2", "#73009e", "#CC79A7","#999999")
myShapes <- c(19,17,15,7,8,11)
chi_list <- c(20,30,40,50,60,70,80)
lambda_list <- c(2/log(327),(2/log(327) + 1)/2,1,1.25,1.5,2,2.5)
am_list <- c(1,3,5,7,10,15,20)
pcart_alpha_list <- c(5,8,11,15,18,20,25)
opcart_alpha_list <- c(1.5,2,2.5,3,3.5,4,4.5)
get_log_loss <- function(fname, method, metric, title, param_list, x_lab, y_lab, col) {
load(paste(fname,".RData",sep = ""))
#results <- results[c("OSEM",   "BDe",     "BGe" ,    "pcart" ,  "opcart"),,,]
results <- results[c("OSEM",   "BDe",     "BGe" ,    "pcart"),,,]
ylim_min <- min(results[,,"log_loss",])
ylim_max <- max(results[,,"log_loss",])
switch (metric,
"log_loss" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","log_loss","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = log_loss, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = log_loss), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(ylim_min,ylim_max))
},
"avg_nr_pa" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","avg_nr_pa","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = avg_nr_pa, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = avg_nr_pa), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(0,5))
},
"both" = {
test <- adply(results[method,,,],c(1,2,4))
test2 <- adply(apply(results[method,,,], c(1,2,3), mean),c(1,2))
test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
setwd("~/Documents/Projects/OSEM/simulations_20210629/results/")
current_dataset <- "logloss_India_v1"
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
g9 <- get_log_loss(current_dataset,"opcart","log_loss","opcart",opcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[5])
g10 <- get_log_loss(current_dataset,"opcart","avg_nr_pa","opcart",opcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[5])
ggarrange(g1,g3,g5,g7,g2,g4,g6,g8,nrow = 2,ncol = 4,align = "v")
