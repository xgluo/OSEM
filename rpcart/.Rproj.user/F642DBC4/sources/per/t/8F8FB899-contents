# -------------------------- #
# Functions for the diagnosis MHN 
# -------------------------- #
#source("scripts/ModelConstruction.R")
#source("scripts/transient_solution.R")

# Utility functions for initialization and time propagation
choose_m <- function(theta, c){
  N <- ncol(theta)
  p0 <- c(1, rep(0,2^N-1))
  gamma <- calc_gamma(theta, 1, 1)[1]
  p <- Q.vec(theta, p0, diag = T, transp = F)/gamma + p0
  diagnose_sum <- 0
  m <- 1
  while(diagnose_sum < c){
    p <- Q.vec(theta, p, diag = T, transp = F)/gamma + p
    diagnose_sum <- sum(p[2^(N-1):2^N])
    m <- m + 1
  }
  list(power = p, m = m)
}

diagnosis_indep <- function(dat){
  N <- ncol(dat)
  indep <- learn_exp_indep(dat)
  indep[N,N] <- 0
  indep
}

diagnosis_pth <- function(theta, m){
  gamma <- calc_gamma(theta, 1, 1)
  p0 <- c(1, rep(0, 2^ncol(theta)-1))
  matrix_power(theta, p0, gamma[1], m)
}

# The diagnosis MHN without online learning
diagnosis_score <- function(theta, pD, p0, m){
  gamma <- calc_gamma(theta, 1, 1)
  pTh <- matrix_power(theta, p0, gamma[1], m)
  pD %*% log(pTh)
}

diagnosis_score_reg <- function(theta, pD, p0, m, lambda){
  N <- sqrt(length(theta))
  theta <- matrix(theta, ncol = N, nrow = N)
  theta[,N] <- rep(0,N)
  penal <- L1(theta)
  theta[,N] <- c(rep(-Inf, N-1), 0)
  diagnosis_score(theta, pD, p0, m) - lambda * penal
}

diagnosis_grad <- function(theta, pD, p0, m){
  gamma <- calc_gamma(theta, 1, 1)[1]
  N <- ncol(theta)
  Mat_Power <- matrix_power(theta, p0, gamma, m)
  q <- t(pD/Mat_Power)
  vec_ind <- 1:(N^2-N)
  G <- foreach(val_ind=vec_ind, .combine = c) %dopar%{
    ind <- getIndex(val_ind, N)
    gamma_ <- calc_gamma(theta, ind$i, ind$j)[2]
    q %*% dmatrix_power(theta, p0, gamma, gamma_, m, ind$i, ind$j)
  }
  G_w <- rep(0,N^2)
  G_w[vec_ind] <- G
  matrix(G_w, N, N)
}

diagnosis_grad_reg <- function(theta, pD, p0, m, lambda){
  N <- sqrt(length(theta))
  theta <- matrix(theta, ncol = N, nrow = N)
  penal_ <- L1_(theta)
  theta[, N] <- c(rep(-Inf, N-1), 0)
  diagnosis_grad(theta, pD, p0, m) - lambda * penal_
}

diagnosis_mhn <- function(dat, lambda, params, tol=0.999) {
  N <- ncol(dat)
  pD <- Data.to.pD(dat[,1:(N-1)])
  init <- Learn.MHN(pD, lambda = lambda)
  init <- cbind(init, rep(0, N-1))
  init <- rbind(init, rep(0, N))
  initm <- choose_m(init, tol)
  pD <- Data.to.pD(dat)
  p0 <- c(1, rep(0, 2^N-1))
  erg <- optim(init, diagnosis_score_reg, diagnosis_grad_reg, pD, p0, initm$m, 
               lambda, method = "L-BFGS-B", lower = -20, upper = 20, control = params)
  erg$par[,N] <- c(rep(-Inf, N-1), 0)
  diag_score <- diagnosis_score(erg$par, pD, p0, initm$m)
  cat("Diagnosis score: ", diag_score, "\n")
  list(par = erg$par, value=diag_score, m = initm$m) 
}

# Online learning for the diagnosis MHN
diagnosis_score_o <- function(theta, m, data_point){
  l <- sum(data_point)
  pD <- c(rep(0, 2^l-1), 1)
  p0 <- c(1, rep(0, 2^l-1))
  gamma <- calc_gamma(theta, 1, 1)[1]
  pTh <- matrix_power_O(theta, p0, gamma, m, data_point)
  pD %*% log(pTh)
}

diagnosis_score_ow <- function(theta, m, dat, lambda){
  N <- sqrt(length(theta))
  theta <- matrix(theta, N, N)
  penal <- L1(theta)
  theta[,N] <- c(rep(-Inf, N-1), 0)
  score <- 0
  score <- foreach(i=1:nrow(dat), .combine = "+")%dopar%{
    diagnosis_score_o(theta, m, dat[i,])
  }
  score/nrow(dat) - lambda * penal
}

diagnosis_grad_online <- function(theta, m, data_point){
  gamma <- calc_gamma(theta, 1, 1)[1]
  N <- ncol(theta)
  G <- matrix(NA, N, N)
  l <- sum(data_point)
  pD <- c(rep(0,2^l-1), 1)
  p0 <- c(1, rep(0, 2^l-1))
  mat_power <- matrix_power_O(theta, p0, gamma, m, data_point)
  q <- t(pD/mat_power)
  vec_ind <- 1:(N^2-N)
  G <- foreach(val_ind=vec_ind, .combine = c) %dopar%{
    ind <- getIndex(val_ind, N)
    gamma_ <- calc_gamma(theta, ind$i, ind$j)[2]
    q %*% dmatrix_power_O(theta, p0, gamma, gamma_, m, ind$i, ind$j, data_point)
  }
  print("one point done")
  G_w <- rep(0,N^2)
  G_w[vec_ind] <- G
  matrix(G_w, N, N)
}

diagnosis_grad_ow <- function(theta, m, dat, lambda){
  N <- sqrt(length(theta))
  theta <- matrix(theta, N, N)
  penal <- L1_(theta)
  theta[, N] <- c(rep(-Inf, N-1), 0)
  G <- matrix(0, ncol(theta), ncol(theta))
  for (k in 1:nrow(dat)){
    G <- G + diagnosis_grad_online(theta, m, dat[k, ])
  }
  print("one step done")
  G/nrow(dat) - lambda * penal
}

diagnosis_mhn_ow <- function(dat, lambda, params, tol=0.999){
  dat_diag <- cbind(dat, rep(1, nrow(mice_mut)))
  init <- diagnosis_indep(dat_diag)
  N <- ncol(dat_diag)
  initm <- choose_m(init, tol)
  res_diag_mhn <- optim(init, diagnosis_score_ow, diagnosis_grad_ow, initm$m, 
                        dat_diag, 0.01, method = "BFGS", control=params)
  list(par = res_diag_mhn$par, value = res_diag_mhn$value, m = initm$m)
}

