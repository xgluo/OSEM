library(treeMHN)
library(Matrix)

n <- 10
N <- 200
lambda_s <- 1
gamma <- 0.5
M <- 100
sparsity <- 0.5
res <- generate_nonempty_trees(n = n, N = N, lambda_s = lambda_s, sparsity = sparsity)
true_Theta <- res$Theta
trees <- res$trees
pred_Theta_MCEM <- learn_MHN_MCEM(n, N, trees, gamma = gamma, lambda_s = lambda_s, M = M) 
pred_Theta_EM <- learn_MHN_EM(n, N, trees, gamma = gamma, lambda_s = lambda_s) 

library(doParallel)
source("ModelConstruction.R")
source("diagnosis_event.R")
source("transient_solution.R")
source("UtilityFunctions.R")
source("ModelConstruction.R")
source("Likelihood.R")
source("RegularizedOptimization.R")
ncores <- 24
cl <- makeCluster(ncores, outfile="")
registerDoParallel(cl)
clusterEvalQ(cl, {
  #setwd("~/Documents/Projects/AML/code/Kevin_MHN/")
  source("ModelConstruction.R")
  source("diagnosis_event.R")
  source("transient_solution.R")
  source("UtilityFunctions.R")
  source("Likelihood.R")
  source("RegularizedOptimization.R")
})
genotypes <- c()
for (i in c(1:length(trees))) {
  genotypes <- rbind(genotypes, trees[[i]]$genotypes)
}
pred_Theta_diagnosis <- diagnosis_mhn(cbind(genotypes,1), lambda = 1/(5*N), params = list(maxit = 500))$par[c(1:n),c(1:n)]
stopCluster(cl)

stat_EM <- compare_Theta(true_Theta, pred_Theta_EM)
stat_MCEM <- compare_Theta(true_Theta, pred_Theta_MCEM)
stat_diagnosis <- compare_Theta(true_Theta, pred_Theta_diagnosis)

stat <- list(stat_EM, stat_MCEM, stat_diagnosis)
Theta <- list(pred_Theta_EM, pred_Theta_MCEM, pred_Theta_diagnosis)
res <- list(stat, Theta)
save(res, file = "res.RData")

