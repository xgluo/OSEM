---
title: "Learning Bayesian Networks from Ordinal Data - Demo"
author: "Xiang Ge Luo"
date: "2021/04/11"
output: 
  md_document:
    variant: markdown_github
---

### 1. Load necessary packages and source code

```{r, message=FALSE}
library(BiDAG)
library(Rgraphviz)
library(pcalg)
library(graph)
library(bnlearn)
library(MXM)
library(sbgcop)
library(infotheo)
library(rpcart)
library(devtools)
#source_url("https://raw.githubusercontent.com/cuiruifei/CausalMissingValues/master/R/gaussCItestLocal.R")
source_url("https://raw.githubusercontent.com/cuiruifei/CausalMissingValues/master/R/inferCopulaModel.R")
#source_url("https://raw.githubusercontent.com/cuiruifei/CausalMissingValues/master/R/addMAR.R")
```

```{r, message=FALSE}
setwd("../R")
# Major file containing the OSEM algorithm
source("ordinalScore.R") 
# Modify some of the existing functions in the BiDAG package to accommodate our user-defined functions
insertSource("spacefns.R",package = "BiDAG")
insertSource("usrscorefns.R",package = "BiDAG")
insertSource("initpar.R",package = "BiDAG")
insertSource("scoreagainstdag.R",package = "BiDAG")
```

### 2. Other functions

```{r}
##' rmvDAG2(N, randDAGobj): 
##' a function that does the same thing as the pcalg::rmvDAG function
##' but the input DAG is not necessarily topologically ordered
##' @param N: number of samples to be drawn
##' @param randDAGobj: a graph object generated from the pcalg::randDAG function
##' @return a Gaussian dataset
rmvDAG2 <- function(N, randDAGobj) {
  AM <- as(randDAGobj, "matrix")
  sorted_ind <- ggm::topOrder((AM != 0))
  n <- nrow(AM)
  data <- matrix(nrow = N,ncol = n)
  for (j in sorted_ind) {
    parentnodes <- which(AM[,j] != 0)
    lp <- length(parentnodes)
    switch (as.character(lp),
            "0" = {data[,j] <- rnorm(N)},
            "1" = {data[,j] <- rnorm(N, mean = data[,parentnodes] * AM[parentnodes,j], sd = 1)},
            {data[,j] <- rnorm(N, mean = data[,parentnodes] %*% AM[parentnodes,j], sd = 1)}
    )
  }
  return(data)
}
```

```{r}
##' cutfun(L, c): 
##' a function that simulates the cell probabilities from a symmetric Dirichlet distribution
##' @param L: number of ordinal levels
##' @param c: Dirichlet concentration parameter
##' @return a list of probabilities of length L, summing up to 1
cutfun <- function(L,c) {
  p <- gtools::rdirichlet(1,rep(c,L))
  return(qnorm(cumsum(p)[1:(L-1)]))
}
```

```{r}
##' convertToOrdinal(scaled_data, exp_levels, concent_param): 
##' a function that converts standardized Gaussian data into ordinal data
##' @param scaled_data: Gaussian dataset with each dimension standardized
##' @param exp_levels: expected number of ordinal levels
##' @param concent_param: Dirichlet concentration parameter
##' @return an ordinal dataset
convertToOrdinal <- function(scaled_data, exp_levels = 4,concent_param = 2) {
  n <- ncol(scaled_data)
  if (exp_levels == 2) {
    ordinal_levels <- replicate(n,2)
  } else {
    ordinal_levels <- replicate(n,sample(c(2:(2 * exp_levels - 2)),1))
  }
  ordinal_data <- scaled_data
  for (i in c(1:n)) {
    
    check_levels <- ordinal_levels[i] - 1
    while (check_levels != ordinal_levels[i]) {
      cuts <- c(-Inf, 
                cutfun(ordinal_levels[i],concent_param), 
                Inf)
      temp <- cut(scaled_data[,i], simplify2array(cuts), labels = FALSE) - 1
      check_levels <- length(unique(temp))
    }
    ordinal_data[,i] <- temp
    
  }
  colnames(ordinal_data) <- c(1:n)
  return(ordinal_data)
}
```

```{r}
##' mywFUN(m): 
##' a function that samples the edge weights uniformly from the interval (-1,-0.4) U (0.4,1)
##' @param m: number of edges in the DAG
##' @return m edge weights
mywFUN <- function(m) {
  return(replicate(m,mywFUNhelper()))
}
mywFUNhelper <- function() {
  y <- runif(1, 0, 1.2)
  if( y < 0.6 ){
    x <- -1 + y
  }else{
    x <- 0.4 + y - 0.6
  }
  return(x)
}
```

### 3. Generate DAGs and ordinal data

```{r generate}
set.seed(888)
# Generate a regular DAG with 20 nodes with 4 number of neighbors
n <- 20
trueDAG <- randDAG(n = n, d = 4, method = "er", wFUN = list(mywFUN))

# Generate a Gaussian dataset based on the DAG and standardize each dimension
# Sample size = 500
N <- 500
hidden_data <- rmvDAG2(N, trueDAG)
truecov <- trueCov(trueDAG)
D <- diag(sqrt(diag(truecov)))
D.inv <- chol2inv(chol(D))
trueSigma <- D.inv %*% truecov %*% D.inv
scaled_data <- t(D.inv %*% t(hidden_data))

# Convert the Gaussian dataset into an ordinal dataset
ordinal_data <- convertToOrdinal(scaled_data, exp_levels = 4,concent_param = 2)
ordinal_data_df <- as.data.frame(ordinal_data)
ordinal_data_df[] <- lapply(ordinal_data_df[], as.ordered)
ordinal_levels <- apply(ordinal_data, 2, function(x) length(unique(x)))
```

### 4. Learn the structures using different methods

The following simulations can be repeated many times for different configurations of parameters in order to obtain the ROC curves.

- NPC

```{r NPC, message=FALSE, warning = FALSE}
# # NPC algorithm with the nominal deviance test (significance level: 0.05)
# NPCfit <- pc(suffStat = list(data = ordinal_data_df, stat_type = "dev"),
#              alpha = 0.05,
#              indepTest = catCItest,
#              labels = colnames(ordinal_data))
# NPC algorithm with the G^2 test (significance level: 0.05)
NPCfit <- pc(suffStat = list(dm = ordinal_data, 
                             nlev = apply(ordinal_data, 2, function (x) length(unique(x))),
                             adaptDF = FALSE),
             alpha = 0.05,
             indepTest = disCItest,
             labels = colnames(ordinal_data))
# # NPC algorithm with the Pearson X^2 test (significance level: 0.05)
# NPCfit <- amat(pc.stable(ordinal_data_df, alpha = 0.05, test = "x2"))
# # NPC algorithm with the mutual information (significance level: 0.05)
# NPCfit <- amat(pc.stable(ordinal_data_df, alpha = 0.05, test = "mi"))
```

```{r, echo = FALSE}
par(mfrow = c(1,2))
plot(trueDAG, main = "True DAG")
tempgraph <- graphAM(as(NPCfit,"matrix"), edgemode = "directed")
plot(tempgraph, main= "NPC")
```

```{r}
# Compare the patterns between them
comparePatterns(NPCfit,trueDAG) # hard version
comparePatterns(NPCfit,trueDAG,hardP2P = FALSE) # soft version
```

- OPC (Musella, 2013)

```{r OPC, message = FALSE, warning = FALSE, cache = TRUE}
# OPC algorithm with the ordinal Jonckheere–Terpstra test (significance level: 0.05) (gRim implementation)
OPCfit <- pc(suffStat = list(data = ordinal_data_df, stat_type = "jt"),
             alpha = 0.05,
             indepTest = catCItest,
             labels = colnames(ordinal_data))
# OPC algorithm with the ordinal Jonckheere–Terpstra test (significance level: 0.05) (bnlearn implementation)
OPCfit <- amat(pc.stable(ordinal_data_df, alpha = 0.05, test = "jt"))
```

```{r, echo = FALSE}
par(mfrow = c(1,2))
plot(trueDAG, main = "True DAG")
tempgraph <- graphAM(as(OPCfit,"matrix"), edgemode = "directed")
plot(tempgraph, main= "OPC")
```

```{r}
# Compare the patterns between them
comparePatterns(OPCfit,trueDAG) # hard version
comparePatterns(OPCfit,trueDAG,hardP2P = FALSE) #soft version
```

- GPC

```{r GPC, warning = FALSE}
# GPC algorithm with the Gaussian test (significance level: 0.05)
GPCfit <- pc(suffStat = list(C = cor(ordinal_data), n = N),
             alpha = 0.05,
             indepTest = gaussCItest,
             labels = colnames(ordinal_data))
# # GPC algorithm (significance level: 0.05) (bnlearn implementation)
# GPCfit <- amat(pc.stable(as.data.frame(ordinal_data), alpha = 0.05, test = "zf"))
```

```{r, echo = FALSE}
par(mfrow = c(1,2))
plot(trueDAG, main = "True DAG")
tempgraph <- graphAM(as(GPCfit,"matrix"), edgemode = "directed")
plot(tempgraph, main= "GPC")
```

```{r}
# Compare the patterns between them
comparePatterns(GPCfit,trueDAG) # hard version
comparePatterns(GPCfit,trueDAG,hardP2P = FALSE) # soft version
```

- RPC (Harris and Drton, 2013; Cui et al., 2018)

```{r RPC, cache = TRUE}
corr.rank <- sin(pi/2 * cor(ordinal_data, use = 'pairwise.complete.obs', method = 'kendall'))
RPCfit <- pc(suffStat = list(C = corr.rank, n = N), 
             indepTest = gaussCItest, labels = colnames(ordinal_data), alpha = 0.05, conservative = T)
```

```{r, echo = FALSE}
par(mfrow = c(1,2))
plot(trueDAG, main = "True DAG")
tempgraph <- graphAM(as(RPCfit,"matrix"), edgemode = "directed")
plot(tempgraph, main= "RPC")
```

```{r}
# Compare the patterns between them
comparePatterns(RPCfit,trueDAG) # hard version
comparePatterns(RPCfit,trueDAG,hardP2P = FALSE) # soft version
```

- Copula PC (Cui et al., 2016, 2017, 2018)

```{r CPC, cache = TRUE}
# copula object
cop.obj <- inferCopulaModel(ordinal_data, nsamp = 1000, S0 = diag(n)/N, verb = F)
# correlation matrix samples
C_samples <- cop.obj$C.psamp[,, 501:1000]
# average correlation matrix
corr.cop <- apply(C_samples, c(1,2), mean)
# call the PC algorithm for causal discovery
CPCfit <- pc(suffStat = list(C = corr.cop, n = N), 
             indepTest = gaussCItest, labels = colnames(ordinal_data), alpha = 0.05, conservative = T)
```

```{r, echo = FALSE}
par(mfrow = c(1,2))
plot(trueDAG, main = "True DAG")
tempgraph <- graphAM(as(CPCfit,"matrix"), edgemode = "directed")
plot(tempgraph, main= "CPC")
```

```{r}
# Compare the patterns between them
comparePatterns(CPCfit,trueDAG) # hard version
comparePatterns(CPCfit,trueDAG,hardP2P = FALSE) # soft version
```

- MMPC (Tsagris et al., 2018)

```{r MMPC, message=FALSE, warning = FALSE, cache = TRUE}
skel <- pc.skel(ordinal_data_df, method = "comb.mm", alpha = 0.05)
MMDAG <- pc.or(skel)$G
MMDAG[MMDAG == 2] <- 1
MMDAG[MMDAG == 3] <- 0
```

```{r, echo = FALSE}
par(mfrow = c(1,2))
plot(trueDAG, main = "True DAG")
tempgraph <- graphAM(MMDAG, edgemode = "directed")
plot(tempgraph, main= "MMPC")
```

```{r}
# Compare the patterns between them
comparePatterns(MMDAG,trueDAG) # hard version
comparePatterns(MMDAG,trueDAG,hardP2P = FALSE) # soft version
```

- BDe (Heckerman and Geiger, 1995)

```{r BDe, results='hide', cache = TRUE}
# hybrid method with the BDe score and the nominal PC output as the initial search space
BDE <- scoreparameters("bdecat",data.frame(ordinal_data),bdecatpar = list(chi = 0.5))
BDEfit <- iterativeMCMC(BDE)
```

```{r, echo = FALSE}
par(mfrow = c(1,2))
plot(trueDAG, main = "True DAG")
tempgraph <- graphAM(BDEfit$DAG, edgemode = "directed")
plot(tempgraph, main= "BDe")
```

```{r}
# Compare the patterns between them
comparePatterns(BDEfit$DAG,trueDAG) # hard version
comparePatterns(BDEfit$DAG,trueDAG,hardP2P = FALSE) # soft version
```

- BGe (Heckerman and Geiger, 1995)

```{r BGe, results='hide', cache = TRUE}
# hybrid method with the BGe score and the Gaussian PC output as the initial search space
BGE <- scoreparameters("bge", ordinal_data, bgepar = list(am = 0.5))
BGEfit <- iterativeMCMC(BGE,scoreout = TRUE)
```

```{r, echo = FALSE}
par(mfrow = c(1,2))
plot(trueDAG, main = "True DAG")
tempgraph <- graphAM(BGEfit$DAG, edgemode = "directed")
plot(tempgraph, main= "BGe")
```

```{r}
# Compare the patterns between them
comparePatterns(BGEfit$DAG,trueDAG) # hard version
comparePatterns(BGEfit$DAG,trueDAG,hardP2P = FALSE) # soft version
```

- OSEM

```{r OSEM, results='hide', cache = TRUE}
# the OSEM algorithm
OSEMfit <- ordinalStructEM(n, ordinal_data,
                           usrpar = list(penType = "other",
                                         L = 5,
                                         lambda = 3,
                                         preLevels = NULL))
```

```{r, echo = FALSE}
par(mfrow = c(1,2))
plot(trueDAG, main = "True DAG")
tempgraph <- graphAM(OSEMfit$DAG, edgemode = "directed")
plot(tempgraph, main= "OSEM")
```

```{r}
# Compare the patterns between them
comparePatterns(OSEMfit$DAG,trueDAG) # hard version
comparePatterns(OSEMfit$DAG,trueDAG,hardP2P = FALSE) # soft version
```

- pcart (Talvitie et al., 2019)

```{r, message=FALSE}
setwd("../R")
insertSource("usrscorefns_pcart.R",package = "BiDAG")
```

```{r pcart, warning=FALSE, cache=TRUE}
pcartparam <- scoreparameters("usr", ordinal_data_df, 
                              usrpar = list(pcart_alpha = 1.5,
                                            pcart_kappa = 1,
                                            pctesttype = "bde", 
                                            preLevels = ordinal_levels,
                                            response_type = "ORD"))
# need to set limit to the parent set size due to computational limit
pcartfit <- iterativeMCMC(pcartparam, alpha = 0, plus1it = 10, softlimit = 3, hardlimit = 3)
```

```{r, echo = FALSE}
par(mfrow = c(1,2))
plot(trueDAG, main = "True DAG")
tempgraph <- graphAM(pcartfit$DAG, edgemode = "directed")
plot(tempgraph, main= "pcart")
```

```{r}
# Compare the patterns between them
comparePatterns(pcartfit$DAG,trueDAG) # hard version
comparePatterns(pcartfit$DAG,trueDAG,hardP2P = FALSE) # soft version
```







