"0","##' rmvDAG2(N, randDAGobj): "
"0","##' a function that does the same thing as the pcalg::rmvDAG function"
"0","##' but the input DAG is not necessarily topologically ordered"
"0","##' @param N: number of samples to be drawn"
"0","##' @param randDAGobj: a graph object generated from the pcalg::randDAG function"
"0","##' @return a Gaussian dataset"
"0","rmvDAG2 <- function(N, randDAGobj) {"
"0","  AM <- as(randDAGobj, ""matrix"")"
"0","  sorted_ind <- ggm::topOrder((AM != 0))"
"0","  n <- nrow(AM)"
"0","  data <- matrix(nrow = N,ncol = n)"
"0","  for (j in sorted_ind) {"
"0","    parentnodes <- which(AM[,j] != 0)"
"0","    lp <- length(parentnodes)"
"0","    switch (as.character(lp),"
"0","            ""0"" = {data[,j] <- rnorm(N)},"
"0","            ""1"" = {data[,j] <- rnorm(N, mean = data[,parentnodes] * AM[parentnodes,j], sd = 1)},"
"0","            {data[,j] <- rnorm(N, mean = data[,parentnodes] %*% AM[parentnodes,j], sd = 1)}"
"0","    )"
"0","  }"
"0","  return(data)"
"0","}"
