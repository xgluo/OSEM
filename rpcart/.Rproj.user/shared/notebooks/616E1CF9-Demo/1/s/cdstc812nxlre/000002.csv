"0","##' convertToOrdinal(scaled_data, exp_levels, concent_param): "
"0","##' a function that converts standardized Gaussian data into ordinal data"
"0","##' @param scaled_data: Gaussian dataset with each dimension standardized"
"0","##' @param exp_levels: expected number of ordinal levels"
"0","##' @param concent_param: Dirichlet concentration parameter"
"0","##' @return an ordinal dataset"
"0","convertToOrdinal <- function(scaled_data, exp_levels = 4,concent_param = 2) {"
"0","  n <- ncol(scaled_data)"
"0","  if (exp_levels == 2) {"
"0","    ordinal_levels <- replicate(n,2)"
"0","  } else {"
"0","    ordinal_levels <- replicate(n,sample(c(2:(2 * exp_levels - 2)),1))"
"0","  }"
"0","  ordinal_data <- scaled_data"
"0","  for (i in c(1:n)) {"
"0","    "
"0","    check_levels <- ordinal_levels[i] - 1"
"0","    while (check_levels != ordinal_levels[i]) {"
"0","      cuts <- c(-Inf, "
"0","                cutfun(ordinal_levels[i],concent_param), "
"0","                Inf)"
"0","      temp <- cut(scaled_data[,i], simplify2array(cuts), labels = FALSE) - 1"
"0","      check_levels <- length(unique(temp))"
"0","    }"
"0","    ordinal_data[,i] <- temp"
"0","    "
"0","  }"
"0","  colnames(ordinal_data) <- c(1:n)"
"0","  return(ordinal_data)"
"0","}"
