// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cli_pcart
List cli_pcart(NumericMatrix rdata, size_t predictorCount, size_t dataCount, std::vector<size_t> pred_catCounts, std::string res_type, size_t res_catCount, double alpha, double kappa, double ess, bool useStructureScore);
RcppExport SEXP _rpcart_cli_pcart(SEXP rdataSEXP, SEXP predictorCountSEXP, SEXP dataCountSEXP, SEXP pred_catCountsSEXP, SEXP res_typeSEXP, SEXP res_catCountSEXP, SEXP alphaSEXP, SEXP kappaSEXP, SEXP essSEXP, SEXP useStructureScoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rdata(rdataSEXP);
    Rcpp::traits::input_parameter< size_t >::type predictorCount(predictorCountSEXP);
    Rcpp::traits::input_parameter< size_t >::type dataCount(dataCountSEXP);
    Rcpp::traits::input_parameter< std::vector<size_t> >::type pred_catCounts(pred_catCountsSEXP);
    Rcpp::traits::input_parameter< std::string >::type res_type(res_typeSEXP);
    Rcpp::traits::input_parameter< size_t >::type res_catCount(res_catCountSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type ess(essSEXP);
    Rcpp::traits::input_parameter< bool >::type useStructureScore(useStructureScoreSEXP);
    rcpp_result_gen = Rcpp::wrap(cli_pcart(rdata, predictorCount, dataCount, pred_catCounts, res_type, res_catCount, alpha, kappa, ess, useStructureScore));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rpcart_cli_pcart", (DL_FUNC) &_rpcart_cli_pcart, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_rpcart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
