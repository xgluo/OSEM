test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
g12 <- get_log_loss(current_dataset,"pcart2","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[6])
g12
g12 <- get_log_loss(current_dataset,"pcart2","log_loss","pcart approx.",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[6])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
ggarrange(g6,g12)
ggarrange(g7,g12)
1.25^4
1/0.25*(1.25^4)
1/0.25*(1.25^4) * 380
1/0.25*(1.25^5) * 380
1/(1.25^4) * 380
x <- c(rep(4,8),rep(3,4),rep(5,5),4.5)
hist(x, xlim = c(1,5),breaks = 10,main = "Project difficulty",xlab = "Difficulty",ylab = "Number of votes")
abline(v = mean(x),col = "red")
text(4.5,6,paste("mean =", round(mean(x),2)),col = "red")
?p.adjust
# install.packages("devtools")
devtools::install_github("caravagnalab.github.io/revolver")
# install.packages("devtools")
devtools::install_github("caravagnalab/revolver")
log(0.1,10)
log(0.01,10)
log(1e-10,10)
load("/Users/luox/Documents/Projects/OSEM/simulations_20210510/logloss9.RData")
library(ggplot2)
library(gridExtra)
library(plyr)
library(ggpubr)
library(latex2exp)
library(dplyr)
setwd("~/Documents/Projects/OSEM/simulations_20210510/")
myPalette <- c("#E69F00","#56B4E9","#2b9e00","#0072B2", "#73009e", "#CC79A7","#999999")
myShapes <- c(19,17,15,7,8,11)
chi_list <- c(20,30,40,50,60,70,80)
lambda_list <- c(2/log(327),(2/log(327) + 1)/2,1,1.25,1.5,2,2.5)
am_list <- c(1,3,5,7,10,15,20)
pcart_alpha_list <- c(5,8,11,15,18,20,25)
opcart_alpha_list <- c(1.5,2,2.5,3,3.5,4,4.5)
get_log_loss <- function(fname, method, metric, title, param_list, x_lab, y_lab, col) {
load(paste(fname,".RData",sep = ""))
switch (metric,
"log_loss" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","log_loss","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = log_loss, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = log_loss), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(-2600,-2100))
},
"avg_nr_pa" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","avg_nr_pa","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = avg_nr_pa, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = avg_nr_pa), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(1,5))
},
"both" = {
test <- adply(results[methods,,,],c(1,2,4))
test2 <- adply(apply(results[methods,,,], c(1,2,3), mean),c(1,2))
test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
current_dataset <- "logloss9"
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
g9 <- get_log_loss(current_dataset,"opcart","log_loss","opcart",opcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[5])
g10 <- get_log_loss(current_dataset,"opcart","avg_nr_pa","opcart",opcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[5])
ggarrange(g1,g3,g5,g7,g9,g2,g4,g6,g8,g10,nrow = 2,ncol = 5,align = "v")
ggarrange(g1,g3,g5,g7,g2,g4,g6,g8,nrow = 2,ncol = 4,align = "v")
get_log_loss <- function(fname, method, metric, title, param_list, x_lab, y_lab, col) {
load(paste(fname,".RData",sep = ""))
switch (metric,
"log_loss" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","log_loss","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = log_loss, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = log_loss), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(-2400,-2050))
},
"avg_nr_pa" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","avg_nr_pa","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = avg_nr_pa, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = avg_nr_pa), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(1,5))
},
"both" = {
test <- adply(results[methods,,,],c(1,2,4))
test2 <- adply(apply(results[methods,,,], c(1,2,3), mean),c(1,2))
test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
g9 <- get_log_loss(current_dataset,"opcart","log_loss","opcart",opcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[5])
g10 <- get_log_loss(current_dataset,"opcart","avg_nr_pa","opcart",opcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[5])
ggarrange(g1,g3,g5,g7,g2,g4,g6,g8,nrow = 2,ncol = 4,align = "v")
get_log_loss <- function(fname, method, metric, title, param_list, x_lab, y_lab, col) {
load(paste(fname,".RData",sep = ""))
switch (metric,
"log_loss" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","log_loss","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = log_loss, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = log_loss), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(-2400,-2100))
},
"avg_nr_pa" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","avg_nr_pa","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = avg_nr_pa, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = avg_nr_pa), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(0,5))
},
"both" = {
test <- adply(results[methods,,,],c(1,2,4))
test2 <- adply(apply(results[methods,,,], c(1,2,3), mean),c(1,2))
test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
current_dataset <- "logloss9"
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
g9 <- get_log_loss(current_dataset,"opcart","log_loss","opcart",opcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[5])
g10 <- get_log_loss(current_dataset,"opcart","avg_nr_pa","opcart",opcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[5])
ggarrange(g1,g3,g5,g7,g2,g4,g6,g8,nrow = 2,ncol = 4,align = "v")
g11 <- get_log_loss(current_dataset,c("OSEM","BGe"),"both","",NULL,"average parent set size","log loss",NULL)
current_dataset <- "logloss9"
g11 <- get_log_loss(current_dataset,c("OSEM","BGe"),"both","",NULL,"average parent set size","log loss",NULL)
get_log_loss <- function(fname, method, metric, title, param_list, x_lab, y_lab, col) {
load(paste(fname,".RData",sep = ""))
switch (metric,
"log_loss" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","log_loss","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = log_loss, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = log_loss), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(-2400,-2100))
},
"avg_nr_pa" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","avg_nr_pa","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = avg_nr_pa, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = avg_nr_pa), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(0,5))
},
"both" = {
test <- adply(results[method,,,],c(1,2,4))
test2 <- adply(apply(results[methods,,,], c(1,2,3), mean),c(1,2))
test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
get_log_loss <- function(fname, method, metric, title, param_list, x_lab, y_lab, col) {
load(paste(fname,".RData",sep = ""))
switch (metric,
"log_loss" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","log_loss","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = log_loss, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = log_loss), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(-2400,-2100))
},
"avg_nr_pa" = {
test <- adply(results[method,,metric,],c(1,2))
test$param <- param_list[test$X1]
colnames(test) <- c("index","nr","avg_nr_pa","param")
test2 <- with(test,aggregate(.~index,test,mean))[,c(3,4)]
g <- ggplot(test) +
geom_boxplot(aes(x = param, y = avg_nr_pa, group = param), color = col, show.legend = FALSE) +
geom_line(mapping = aes(x = param, y = avg_nr_pa), color = col, data = test2, show.legend = FALSE) +
labs(title = title) + ylab(y_lab) + xlab(x_lab) + theme(legend.position = "none") + ylim(c(0,5))
},
"both" = {
test <- adply(results[method,,,],c(1,2,4))
test2 <- adply(apply(results[method,,,], c(1,2,3), mean),c(1,2))
test3 <- test2 %>% group_by(X1) %>% filter(log_loss == max(log_loss))
g <- ggplot(test)  + ylim(c(-2400,-2100)) + xlim(c(1,5)) +
geom_point(aes(x = avg_nr_pa, y = log_loss, group = X1, fill = factor(X1)), alpha = 0.15, stroke = 0,shape = 21) +
geom_line(mapping = aes(x = avg_nr_pa, y = log_loss, group = X1, colour = factor(X1)), data = test2) +
geom_point(data = test3,mapping = aes(x = avg_nr_pa, y = log_loss,
group = X1, shape = factor(X1),
colour = factor(X1)),
size = 4.5) +
scale_color_manual(values = myPalette) +
scale_fill_manual(values = myPalette) +
scale_shape_manual(values = myShapes) +
guides(shape = FALSE,fill = FALSE, colour = guide_legend(override.aes = list(shape = myShapes[1:length(methods)]))) +
labs(color = "Method", title = title) + ylab(y_lab) + xlab(x_lab)
}
)
return(g)
}
g11 <- get_log_loss(current_dataset,c("OSEM","BGe"),"both","",NULL,"average parent set size","log loss",NULL)
g11
ggarrange(g1,g3,g5,g7,g2,g4,g6,g8,nrow = 2,ncol = 4,align = "v")
load("/Users/luox/Documents/Projects/OSEM/simulations_20210510/logloss9.RData")
dimnames(results)
results1 <- array(results[1,3,,],dim = c(1,2,100))
results2 <- results[c(2:4),4,,]
#results3 <- array(results[3,4,,],dim = c(1,2,100))
#results2 <- abind(results1,results3,results2,along = 1)
results2 <- abind(results1,results2,along = 1)
library(abind)
#results3 <- array(results[3,4,,],dim = c(1,2,100))
#results2 <- abind(results1,results3,results2,along = 1)
results2 <- abind(results1,results2,along = 1)
dimnames(results2)[[1]] <- c("OSEM","BGe","BDe","pcart")
test <- adply(results2[,1,],c(1,2))
colnames(test) <- c("Method","Nr","Log_loss")
test2 <- with(test,aggregate(.~Method,test,mean))[,c(1,3)]
colnames(test2) <- list("Method","Log_loss")
g1 <- ggplot(test, aes(x = Method, y = Log_loss, color = Method)) + geom_boxplot(show.legend = FALSE) +
labs(color = "Method") +
ylab("log loss on test data") + xlab("Method") +
scale_fill_manual(values = myPalette) + scale_color_manual(values = myPalette) + theme(legend.position = "none")
test <- adply(results2[,2,],c(1,2))
colnames(test) <- c("Method","Nr","avg_nr_pa")
test2 <- with(test,aggregate(.~Method,test,mean))[,c(1,3)]
colnames(test2) <- list("Method","avg_nr_pa")
g2 <- ggplot(test, aes(x = Method, y = avg_nr_pa, color = Method)) + geom_boxplot(show.legend = FALSE) +
labs(color = "Method") +
ylab("average parent set size") + xlab("Method") +
scale_fill_manual(values = myPalette) + scale_color_manual(values = myPalette) + theme(legend.position = "none")
ggarrange(g1,g2)
current_dataset <- "logloss9"
g1 <- get_log_loss(current_dataset,"OSEM","log_loss","OSEM",lambda_list,TeX("$\\lambda$"),"log loss",myPalette[1])
g2 <- get_log_loss(current_dataset,"OSEM","avg_nr_pa","OSEM",lambda_list,TeX("$\\lambda$"),"average parent set size",myPalette[1])
g3 <- get_log_loss(current_dataset,"BGe","log_loss","BGe",am_list,TeX("$a_m$"),"log loss",myPalette[2])
g4 <- get_log_loss(current_dataset,"BGe","avg_nr_pa","BGe",am_list,TeX("$a_m$"),"average parent set size",myPalette[2])
g5 <- get_log_loss(current_dataset,"BDe","log_loss","BDe",chi_list,TeX("$\\chi$"),"log loss",myPalette[3])
g6 <- get_log_loss(current_dataset,"BDe","avg_nr_pa","BDe",chi_list,TeX("$\\chi$"),"average parent set size",myPalette[3])
g7 <- get_log_loss(current_dataset,"pcart","log_loss","pcart",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[4])
g8 <- get_log_loss(current_dataset,"pcart","avg_nr_pa","pcart",pcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[4])
g9 <- get_log_loss(current_dataset,"opcart","log_loss","opcart",opcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[5])
g10 <- get_log_loss(current_dataset,"opcart","avg_nr_pa","opcart",opcart_alpha_list,TeX("$\\alpha$"),"average parent set size",myPalette[5])
g12 <- get_log_loss(current_dataset,"pcart2","log_loss","pcart approx.",pcart_alpha_list,TeX("$\\alpha$"),"log loss",myPalette[6])
ggarrange(g1,g3,g5,g7,g2,g4,g6,g8,nrow = 2,ncol = 4,align = "v")
dimnames(results)
dimnames(results2)
results1 <- array(results[1,3,,],dim = c(1,2,100))
results2 <- results[c(2:4),4,,]
#results3 <- array(results[3,4,,],dim = c(1,2,100))
#results2 <- abind(results1,results3,results2,along = 1)
results2 <- abind(results1,results2,along = 1)
dimnames(results2)[[1]]
dim(results2)
dimnames(results2)[[1]] <- c("OSEM","BDe","BGe","pcart")
results2 <- results2[c("OSEM","BGe","BDe","pcart"),,]
test <- adply(results2[,1,],c(1,2))
colnames(test) <- c("Method","Nr","Log_loss")
test2 <- with(test,aggregate(.~Method,test,mean))[,c(1,3)]
colnames(test2) <- list("Method","Log_loss")
g1 <- ggplot(test, aes(x = Method, y = Log_loss, color = Method)) + geom_boxplot(show.legend = FALSE) +
labs(color = "Method") +
ylab("log loss on test data") + xlab("Method") +
scale_fill_manual(values = myPalette) + scale_color_manual(values = myPalette) + theme(legend.position = "none")
test <- adply(results2[,2,],c(1,2))
colnames(test) <- c("Method","Nr","avg_nr_pa")
test2 <- with(test,aggregate(.~Method,test,mean))[,c(1,3)]
colnames(test2) <- list("Method","avg_nr_pa")
g2 <- ggplot(test, aes(x = Method, y = avg_nr_pa, color = Method)) + geom_boxplot(show.legend = FALSE) +
labs(color = "Method") +
ylab("average parent set size") + xlab("Method") +
scale_fill_manual(values = myPalette) + scale_color_manual(values = myPalette) + theme(legend.position = "none")
ggarrange(g1,g2)
ggarrange(g1,g3,g5,g7,g2,g4,g6,g8,nrow = 2,ncol = 4,align = "v")
load("/Users/luox/Documents/Projects/AML/code/scican_20210309/AML_Theta_EM.RData")
load("/Users/luox/Documents/Projects/AML/code/scican_20210309/AML_Theta_MCEM.RData")
library(treeMHN)
?mclapply
test <- rep(0,10)
test[c(1,5,6)] <- 1
test
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_SS_gamma_5_threshold_90.RData")
dim(res)
apply(res,2,sum) > 90
sum(apply(res,2,sum) > 90)
sum(apply(res,2,sum) > 95)
sum(apply(res,2,sum) > 99)
library(corrplot)
corrplot(matrix(apply(res,2,sum) > 99,nrow = 32))
corrplot(matrix(apply(res,2,sum) > 90,nrow = 32))
corrplot(matrix(apply(res,2,sum) > 99,nrow = 32))
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_SS_gamma_5_threshold_90_2.RData")
corrplot(matrix(apply(res,2,sum) > 99,nrow = 32))
corrplot(matrix(apply(res,2,sum) > 90,nrow = 32))
corrplot(matrix(apply(res,2,sum) > 95,nrow = 32))
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_SS_gamma_5_threshold_90_500.RData")
corrplot(matrix(apply(res,2,mean) > 0.95,nrow = 32))
corrplot(matrix(apply(res,2,mean) > 0.8,nrow = 32))
corrplot(matrix(apply(res,2,mean) > 0.9,nrow = 32))
matrix(c(1:9),nrow = 3)
test <- matrix(c(1:9),nrow = 3)
which(test == 4)
test[4]
test2 <- rep(0,9)
test2[test > 4] <- 1
test2
matrix(test2,nrow = 3)
corrplot(matrix(apply(res,2,mean) > 0.95,nrow = 32))
par(mfrow = c(1,2))
corrplot(matrix(apply(res,2,mean) > 0.95,nrow = 32))
corrplot(matrix(apply(res,2,mean) > 0.90,nrow = 32))
corrplot(matrix(apply(res,2,mean) > 0.80,nrow = 32))
corrplot(matrix(apply(res,2,mean) > 0.90,nrow = 32))
sum(matrix(apply(res,2,mean) > 0.90,nrow = 32) != 0)
277-32
245^2/992/0.8
75/992
sum(matrix(apply(res,2,mean) > 0.95,nrow = 32) != 0)
226^2/992/0.8
64/992
226-32
194^2/992/0.8
194^2/992/0.8/992
500*0.95
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_SS_gamma_5_threshold_90_500.RData")
?foreach
library(foreach)
?foreach
foreach(i = c(1:10),.combine = sum) %dopar% {i^2}
?registerDoParallel
library(doParallel)
?registerDoParallel
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_CV1.RData")
res
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_CV1.RData")
res
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_CV1.RData")
res
simplify2array(res)
res <- simplify2array(res)
apply(res,2,sum)/123
dim(res)
type(res)
class(res)
apply(res,2,sum)
apply(res,1,sum)
apply(as.matrix(res),2,sum)
class(res)
res
res/123
res
res[1]
do.call(res,simplify2array())
do.call(res,simplify2array
)
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_CV1.RData")
unlist(res)
apply(matrix(unlist(res),nrow = 5),2,sum)
apply(matrix(unlist(res),nrow = 5),2,sum)/123
gamma_list <- c(0.01, 0.05, 0.1, 0.2, 0.3, 0.5, 1, 2)
plot(gamma_list,apply(matrix(unlist(res),nrow = 5),2,sum)/123)
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_CV1.RData")
res
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_CV2.RData")
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_Theta_EM_SS_gamma0.7.RData")
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_Theta_EM_gamma0.05.RData")
?devtools::install_github
30*29*28
50*49*48
2^20
2^10
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_Theta_EM_SS_gamma0.1.RData")
sapply(c(1:32), function (i) exp(AML_Theta_EM[i,i])) / sum(exp(diag(AML_Theta_EM)))
plot(c(1:32), sapply(c(1:32), function (i) exp(AML_Theta_EM[i,i])) / sum(exp(diag(AML_Theta_EM))))
order(sapply(c(1:32), function (i) exp(AML_Theta_EM[i,i])) / sum(exp(diag(AML_Theta_EM))))
rownames(AML_Theta_EM)
rownames(AML_Theta_EM)[9]
rownames(AML_Theta_EM)[order(sapply(c(1:32), function (i) exp(AML_Theta_EM[i,i])) / sum(exp(diag(AML_Theta_EM))))]
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_SS_gamma_5_threshold_90_500_noITD.RData")
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_CV3.RData")
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_Theta_EM_noITD_gamma0.1_SS.RData")
to_mask <- which(matrix(apply(res,2,mean) > 0.95,nrow = 31) == 0)
class(to_mask)
dim(res)
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_SS_gamma_5_threshold_90_500_noITD.RData")
to_mask <- which(matrix(apply(res,2,mean) > 0.95,nrow = 31) == 0)
31^2 - length(to_mask)
0.12^2
?dplyr::group_by
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_Theta_EM_noITD_gamma0.1_SS.RData")
0.5/3
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/AML_Theta_EM_noITD_gamma0.1_SS.RData")
load("/Users/luox/Documents/Projects/AML/code/simulations_20210621/ROC_n10_N200_s0.5_er0.9.RData")
load("/Users/luox/Documents/Projects/AML/code/simulations_20210621/ROC_n10_N200_s0.5_er0.9v2.RData")
load("/Users/luox/Documents/Projects/AML/code/simulations_20210621/ROC_n10_N200_s0.5_er0.9v3.RData")
20^2
load("/Users/luox/Documents/Projects/AML/code/simulations_20210621/ROC_n10_N200_s0.3_er0.5.RData")
load("/Users/luox/Documents/Projects/AML/code/scican_20210419/simulations/N100_n10_s.5.RData")
load("/Users/luox/Documents/Projects/AML/code/simulations_20210621/ROC_n10_N100_s0.5_er0.7.RData")
load("/Users/luox/Documents/Projects/AML/data/subclone_trees.RData")
head(AML)
AML.dat
head(AML.dat)
